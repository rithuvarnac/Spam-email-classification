# -*- coding: utf-8 -*-
"""spam_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uRE3SeMVzwLcjYacFKONboAhs7nA0Nox
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
df=pd.read_csv('/content/email_spam.csv',encoding="ISO-8859-1")
df

df.isna().sum()

df.dtypes

x=df['title'].unique()
y=df['title'].value_counts()
x,y

plt.bar(x,y)

sns.countplot(y='title',data=df)

sns.countplot(x='type',data=df,color='g')

x=df['text'].unique()
y=df['text'].value_counts
x,y

df['type']=df['type'].map({'spam':1,'not spam':0})
df

df.drop(['title'],axis=1,inplace=True)

df.dtypes

nltk.download('wordnet')
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('omg-1.4')

spam=df.text
spam

from nltk.tokenize import word_tokenize
from nltk.tokenize import TweetTokenizer
tk=TweetTokenizer()
spam=spam.apply(lambda x:tk.tokenize(x)).apply(lambda x:' '.join(x))
spam

import re
spam=spam.str.replace('[^a-zA-Z0-9]+',' ',regex=True)
spam

from nltk.tokenize import word_tokenize
from nltk.tokenize import TweetTokenizer
spam=spam.apply(lambda x:' '.join([w for w in tk.tokenize(x) if len(w)>=3]))
spam

from nltk.stem import SnowballStemmer
stemer=SnowballStemmer('english')
spam=spam.apply(lambda x:[stemer.stem(i.lower())for i in tk.tokenize(x)]).apply(lambda x:' '.join(x))
spam

from nltk.corpus import stopwords
d1=stopwords.words('english')
spam=spam.apply(lambda x:[i for i in tk.tokenize(x)if i not in d1]).apply(lambda x:' '.join(x))
spam

from sklearn.feature_extraction.text import TfidfVectorizer
vec=TfidfVectorizer()
data=vec.fit_transform(spam)
data

print(data)

data.shape

y=df['type'].values
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data,y,test_size=0.30,random_state=42)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
knn=KNeighborsClassifier()
model1=MultinomialNB()
model2=SVC()
lst=[knn,model1,model2]
from sklearn.metrics import confusion_matrix,accuracy_score

for i in lst:
  print(i)
  i.fit(x_train,y_train)
  y_pred=i.predict(x_test)
  print("**********************")
  print("accuracy_score",accuracy_score(y_test,y_pred))